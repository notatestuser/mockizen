#!/usr/bin/env node --harmony

'use strict';

/**
 * Parse launch arguments.
 */
if (process.argv.length < 3) {
  console.error('Usage: mockizen [scenarios.json]');
  process.exitCode = 1;
  return;
}

/**
 * Module dependencies.
 */
const http = require('http');
const path = require('path');
const colors = require('colors/safe');
const pkg = require('../package.json');

/**
 * Load scenarios.
 */
const scenariosPath = path.resolve(process.cwd(), process.argv[2]);
const scenarios = require(scenariosPath);

console.info(colors.bold(`${pkg.name} v${pkg.version}\n`));

/**
 * Init server routes.
 */
const app = require('../src/server')(scenarios, scenariosPath);

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || scenarios.port || '8090');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Serving on ' + bind);
}
